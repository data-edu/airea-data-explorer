---
title: "data prep for tabs 2 and 3"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(haven)
library(tidycensus)
library(treemapify)
```

# prep

```{r}
years <- 2010:2023            # change range as needed

county_pop_ts <- map_dfr(
  years,
  ~ get_acs(
    geography  = "county",
    variables  = "B01003_001",
    year       = .x,
    survey     = "acs5",
    cache_table= TRUE
  ) |>
    mutate(year = .x)         # tag each row with its ACS year
)

county_pop_ts <- county_pop_ts %>% 
  select(-moe)
```

# demand

CZ label by year by SOC, with SOC labels and SOC AIREA status
and postings, %, and by 1000 residents, as well as job requirement

```{r}
crosswalk <- read_dta("prep/camssoc&ciplist.dta")

d <- read_csv("prep/lightcast-soc-year-county-2025-02-24 7_23pm.csv")

cz_labels <- read_csv("cz-labels.csv")

sff <- sf::read_sf("prep/CommutingZones2020_County_GIS_files/county20.shp") %>%
  select(COUNTY = GEOID, CZ = CZ20) %>%
  # mutate(COUNTY = as.integer(COUNTY)) %>%
  as_tibble() %>%
  select(-geometry)

# sff <- sff %>% 
#   left_join(county_pop_ts, by = "COUNTY") %>% 
#   rename(population_estimate = estimate) %>% 
#   select(COUNTY, CZ, population_estimate)

crosswalk_soc <- filter(crosswalk, socflag == 0 & cipflag == 0)
crosswalk_soc <- crosswalk_soc %>% 
  count(soc, soc2018title)
crosswalk_soc

crosswalk_cip <- filter(crosswalk, socflag == 0 & cipflag == 0)
crosswalk_cip <- crosswalk_cip %>% 
  count(cip, cip2020title)
crosswalk_cip
crosswalk_cip

d <- d %>%
  mutate(airea = if_else(SOC_CODE %in% crosswalk_soc$soc, 1, 0))

# change COUNTY into a character string with a leading 0 if there is not one
d <- d %>%
  mutate(COUNTY = str_pad(as.character(COUNTY), width = 5, side = "left", pad = "0"))

county_pop_tj <- select(county_pop_ts, COUNTY = GEOID, population_estimate = estimate, YEAR = year)

d_prepped  <- d %>% 
  left_join(county_pop_tj) %>% 
  left_join(sff)

d_prepped

# cz_tw
bls <- read_dta("prep/bls_ed_requirement.dta")

bls <- bls %>% 
  rename(SOC_CODE = soc) %>% 
  select(-3)

cz_tw <- d_prepped %>% 
  mutate(JOB_POSTS_P1000 = JOB_POSTING_COUNT/population_estimate) %>% 
  group_by(CZ, airea, SOC_CODE, YEAR) %>% 
  summarize(TOTAL_JOB_POSTS = sum(as.integer(JOB_POSTING_COUNT)),
            JOB_POSTS_P1000 = sum(JOB_POSTS_P1000),
            population_estimate_sum = sum(population_estimate)) %>% 
  ungroup() %>%
  select(CZ, everything()) %>% 
  arrange(CZ) %>% 
  left_join(select(cz_labels, CZ, CZ_label))

cz_tw %>% 
  left_join(bls) %>% 
  select(CZ_label, SOC_CODE, AIREA = airea, YEAR, TOTAL_JOB_POSTS, population_estimate_sum) %>% 
  write_rds("supply-raw-data.rds")
```

```{r}
cz_air1 <- cz_tw %>%                     # starting data
  group_by(CZ_label, YEAR) %>%           # one row per CZ-year
  summarise(
    ## (1) count of airea == 1 postings
    posts_air1       = sum(TOTAL_JOB_POSTS[airea == 1], na.rm = TRUE),
    
    ## (2) airea == 1 postings per 1 000 residents
    # -- If JOB_POSTS_P1000 is already “per-1 000” *for each row*,
    #    summing is fine.  Otherwise replace with your own ratio:
    posts_air1_p1000 = sum(JOB_POSTS_P1000[airea == 1], na.rm = TRUE),
    
    ## total postings (airea 0 + 1) – needed to compute the share
    posts_all        = sum(TOTAL_JOB_POSTS,                   na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    ## (3) airea-1 share of all postings
    posts_air1_pct = posts_air1 / posts_all * 100
  ) %>%
  select(CZ_label, YEAR,
         airea_posts = posts_air1,
         airea_posts_p1000 = posts_air1_p1000,
         airea_pct = posts_air1_pct,
         everything())

cz_air1

# cz_air1 %>% 
#   select(-posts_all) %>% 
#   write_csv("demand-for-table-and-time-series") # for the table and the time series plot # population demand

# cz_to_plot <- "Aberdeen, SD CZ"
# 
# soc_totals <- cz_tw %>%                                  # full table
#   filter(CZ_label == cz_to_plot) %>%                     # one CZ
#   group_by(SOC_CODE) %>%                                 # ignore year
#   summarise(posts = sum(TOTAL_JOB_POSTS, na.rm = TRUE),
#             .groups = "drop") %>% 
#   rename(soc = SOC_CODE) %>% 
#   left_join(select(onet, soc, soc_title = soc2018title)) %>% 
#   arrange(desc(posts)) %>% 
#   slice_head(n = 15) %>%                                 # top 15 codes
#   mutate(soc_title = str_wrap(soc_title, 24))            # gentle wrapping

# ggplot(soc_totals) +
#   geom_treemap(aes(area = posts, fill = posts)) +
#   geom_fit_text(
#     aes(area = posts, label = soc_title),  # map area + label again
#     stat      = "treemap",                 # << key linelib
#     grow      = TRUE,
#     reflow    = TRUE,
#     min.size  = 6,                         # hide tiny unreadable labels
#     colour    = "white",
#     padding.x = grid::unit(1, "mm"),
#     padding.y = grid::unit(1, "mm")
#   ) +
#   scale_fill_continuous(type = "viridis") +
#   labs(title = glue("Job-posting volume by SOC code ({cz_to_plot})"),
#        fill  = "Job posts") +
#   theme(legend.position = "bottom")
```

# supply

institution by year by CIP, with CIP labels and CIP AIREA status
and with rural, tribal, HBCU, and completions and %

```{r}
institutions <- read_dta("prep/ccrc_cip_comp_acea.dta")

institutions %>% select(instnm, year, hbcu, tribal, rural,
                        inst_cmplt_tot,
                        inst_perc_acea_tot,
                        mfreq_acea_cip_cmplt1, mfreq_acea_cip_cmplt2, mfreq_acea_cip_cmplt3, mfreq_acea_cip_cmplt4, mfreq_acea_cip_cmplt5) %>% 
  mutate(mfreq_acea_cip1_pct = mfreq_acea_cip_cmplt1 / inst_cmplt_tot,
         mfreq_acea_cip2_pct = mfreq_acea_cip_cmplt2 / inst_cmplt_tot,
         mfreq_acea_cip3_pct = mfreq_acea_cip_cmplt3 / inst_cmplt_tot,
         mfreq_acea_cip4_pct = mfreq_acea_cip_cmplt4 / inst_cmplt_tot,
         mfreq_acea_cip5_pct = mfreq_acea_cip_cmplt5 / inst_cmplt_tot) %>% 
  write_rds("demand-raw-data.rds")

# table - inst, year, total, pct AIREA, HBCU, tribal, rural
# time series - pct%
# treemap - top 5 AIREA completions by CIP, with "other" for the rest
```